name: iOS构建

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # 允许手动触发

jobs:
  build:
    name: 构建与测试
    runs-on: macos-latest

    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Xcode版本
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: 设置Ruby和CocoaPods
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0'
        bundler-cache: true
    
    - name: 安装依赖
      run: |
        gem install cocoapods
        if [ -f "Podfile" ]; then
          pod install --repo-update
        else
          echo "没有找到Podfile，跳过CocoaPods依赖安装"
        fi
      working-directory: ${{ github.workspace }}
      
    - name: 彻底修复Info.plist问题
      run: |
        # 创建桥接头文件
        echo "int poc(char *path);" > iDevice_ZH/iDevice_ZH-Bridge-Header.h
        
        # 修复桥接头文件路径
        sed -i '' 's|/Users/geosn0w/Desktop/iDevice_ZH/iDevice_ZH/iDevice_ZH-Bridge-Header.h|iDevice_ZH/iDevice_ZH-Bridge-Header.h|g' iDevice_ZH.xcodeproj/project.pbxproj
        
        # 准备Info.plist文件
        cp iDevice-Toolkit-Info.plist iDevice_ZH/Info.plist
        
        # 备份原始项目文件
        cp iDevice_ZH.xcodeproj/project.pbxproj iDevice_ZH.xcodeproj/project.pbxproj.backup
        
        # 使用Python脚本彻底清理项目文件中的Info.plist引用
        python3 -c "
import re
import sys

# 读取项目文件
with open('iDevice_ZH.xcodeproj/project.pbxproj', 'r') as f:
    content = f.read()

print('原始项目文件大小:', len(content), '字符')

# 删除所有包含Info.plist的行（在Copy Bundle Resources部分）
lines = content.split('\n')
new_lines = []
in_copy_bundle_resources = False
brace_count = 0

for line in lines:
    # 检测Copy Bundle Resources部分的开始
    if 'Copy Bundle Resources' in line or '13E42FB3C29B95C100B9FAF1' in line:
        in_copy_bundle_resources = True
        brace_count = 0
        new_lines.append(line)
        continue
    
    # 在Copy Bundle Resources部分中
    if in_copy_bundle_resources:
        # 计算大括号以确定何时结束该部分
        brace_count += line.count('{') - line.count('}')
        
        # 如果这行包含Info.plist引用，跳过它
        if 'Info.plist' in line and ('fileRef' in line or '.plist' in line):
            print('删除行:', line.strip())
            continue
        
        new_lines.append(line)
        
        # 如果大括号计数回到0或负数，我们已经离开了Copy Bundle Resources部分
        if brace_count <= 0:
            in_copy_bundle_resources = False
    else:
        new_lines.append(line)

# 另外删除所有PBXFileReference中的Info.plist引用
final_lines = []
for line in new_lines:
    if 'PBXFileReference' in line and 'Info.plist' in line:
        print('删除PBXFileReference行:', line.strip())
        continue
    final_lines.append(line)

new_content = '\n'.join(final_lines)
print('修改后项目文件大小:', len(new_content), '字符')

# 写回文件
with open('iDevice_ZH.xcodeproj/project.pbxproj', 'w') as f:
    f.write(new_content)

print('项目文件清理完成')
"
        
        # 验证清理结果
        echo "检查项目文件中是否还有Info.plist引用:"
        grep -n "Info.plist" iDevice_ZH.xcodeproj/project.pbxproj || echo "✅ 所有Info.plist引用已清除"

    - name: 构建应用
      run: |
        if [ -f "iDevice_ZH.xcworkspace/contents.xcworkspacedata" ]; then
          WORKSPACE_ARG="-workspace iDevice_ZH.xcworkspace"
        else
          WORKSPACE_ARG="-project iDevice_ZH.xcodeproj"
        fi
        
        # 列出可用的scheme
        xcodebuild -list $WORKSPACE_ARG
        
        # 使用模拟器构建 - 明确指定INFOPLIST_FILE
        xcodebuild clean build $WORKSPACE_ARG -scheme "iDevice_ZH" -destination "platform=iOS Simulator,name=iPhone 16 Pro" CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO INFOPLIST_FILE="iDevice_ZH/Info.plist"
      working-directory: ${{ github.workspace }}
      
    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: app-build
        path: |
          ${{ github.workspace }}/build/Release-iphonesimulator/iDevice_ZH.app
          
  archive:
    name: 归档IPA
    needs: build
    runs-on: macos-latest
    if: success()
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Xcode版本
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: 安装依赖
      run: |
        gem install cocoapods
        if [ -f "Podfile" ]; then
          pod install --repo-update
        else
          echo "没有找到Podfile，跳过CocoaPods依赖安装"
        fi
      working-directory: ${{ github.workspace }}
    
    - name: 彻底修复Info.plist问题
      run: |
        # 创建桥接头文件
        echo "int poc(char *path);" > iDevice_ZH/iDevice_ZH-Bridge-Header.h
        
        # 修复桥接头文件路径
        sed -i '' 's|/Users/geosn0w/Desktop/iDevice_ZH/iDevice_ZH/iDevice_ZH-Bridge-Header.h|iDevice_ZH/iDevice_ZH-Bridge-Header.h|g' iDevice_ZH.xcodeproj/project.pbxproj
        
        # 准备Info.plist文件
        cp iDevice-Toolkit-Info.plist iDevice_ZH/Info.plist
        
        # 备份原始项目文件
        cp iDevice_ZH.xcodeproj/project.pbxproj iDevice_ZH.xcodeproj/project.pbxproj.backup
        
        # 使用Python脚本彻底清理项目文件中的Info.plist引用
        python3 -c "
import re
import sys

# 读取项目文件
with open('iDevice_ZH.xcodeproj/project.pbxproj', 'r') as f:
    content = f.read()

print('原始项目文件大小:', len(content), '字符')

# 删除所有包含Info.plist的行（在Copy Bundle Resources部分）
lines = content.split('\n')
new_lines = []
in_copy_bundle_resources = False
brace_count = 0

for line in lines:
    # 检测Copy Bundle Resources部分的开始
    if 'Copy Bundle Resources' in line or '13E42FB3C29B95C100B9FAF1' in line:
        in_copy_bundle_resources = True
        brace_count = 0
        new_lines.append(line)
        continue
    
    # 在Copy Bundle Resources部分中
    if in_copy_bundle_resources:
        # 计算大括号以确定何时结束该部分
        brace_count += line.count('{') - line.count('}')
        
        # 如果这行包含Info.plist引用，跳过它
        if 'Info.plist' in line and ('fileRef' in line or '.plist' in line):
            print('删除行:', line.strip())
            continue
        
        new_lines.append(line)
        
        # 如果大括号计数回到0或负数，我们已经离开了Copy Bundle Resources部分
        if brace_count <= 0:
            in_copy_bundle_resources = False
    else:
        new_lines.append(line)

# 另外删除所有PBXFileReference中的Info.plist引用
final_lines = []
for line in new_lines:
    if 'PBXFileReference' in line and 'Info.plist' in line:
        print('删除PBXFileReference行:', line.strip())
        continue
    final_lines.append(line)

new_content = '\n'.join(final_lines)
print('修改后项目文件大小:', len(new_content), '字符')

# 写回文件
with open('iDevice_ZH.xcodeproj/project.pbxproj', 'w') as f:
    f.write(new_content)

print('项目文件清理完成')
"
        
        # 验证清理结果
        echo "检查项目文件中是否还有Info.plist引用:"
        grep -n "Info.plist" iDevice_ZH.xcodeproj/project.pbxproj || echo "✅ 所有Info.plist引用已清除"
      
    - name: 确保正确使用ExportOptions.plist
      run: |
        # 使用项目中现有的ExportOptions.plist，如果存在的话
        if [ -f "ExportOptions.plist" ]; then
          echo "使用项目中现有的ExportOptions.plist"
          cp ExportOptions.plist $RUNNER_TEMP/ExportOptions.plist
        else
          # 否则创建一个新的，确保包含应用组ID
          echo "创建新的ExportOptions.plist"
          cat > $RUNNER_TEMP/ExportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>development</string>
            <key>compileBitcode</key>
            <false/>
            <key>signingStyle</key>
            <string>automatic</string>
            <key>teamID</key>
            <string>423J45LL22</string>
            <key>provisioningProfiles</key>
            <dict>
                <key>com.idevicecentral.toolkit</key>
                <string>iDevice Toolkit Development</string>
            </dict>
            <key>applicationGroups</key>
            <array>
                <string>group.com.idevicecentral.toolkit</string>
            </array>
        </dict>
        </plist>
        EOF
        fi
        
        # 显示最终的ExportOptions.plist内容以便验证
        echo "ExportOptions.plist内容:"
        cat $RUNNER_TEMP/ExportOptions.plist
  
    - name: 构建和归档 (模拟器)
      run: |
        # 确定工作区或项目参数
        if [ -f "iDevice_ZH.xcworkspace/contents.xcworkspacedata" ]; then
          WORKSPACE_ARG="-workspace iDevice_ZH.xcworkspace"
        else
          WORKSPACE_ARG="-project iDevice_ZH.xcodeproj"
        fi
        
        # 列出可用的scheme
        xcodebuild -list $WORKSPACE_ARG
        
        # 针对模拟器构建并归档 - 明确指定INFOPLIST_FILE
        xcodebuild $WORKSPACE_ARG -scheme "iDevice_ZH" -configuration Debug -sdk iphonesimulator -archivePath $RUNNER_TEMP/iDevice_ZH.xcarchive archive CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO EXCLUDED_ARCHS=arm64 INFOPLIST_FILE="iDevice_ZH/Info.plist"
        
        # 检查归档是否成功
        ls -la $RUNNER_TEMP/iDevice_ZH.xcarchive/Products/ || true
    
    - name: 手动创建IPA
      run: |
        # 手动打包IPA
        mkdir -p $RUNNER_TEMP/ipa/Payload
        
        # 查找应用程序位置
        echo "查找应用程序..."
        APP_PATH="$RUNNER_TEMP/iDevice_ZH.xcarchive/Products/Applications/iDevice_ZH.app"
        
        # 如果找不到主路径，搜索整个归档目录
        if [ ! -d "$APP_PATH" ]; then
          echo "在主路径未找到应用，搜索其他位置..."
          APP_PATH=$(find $RUNNER_TEMP/iDevice_ZH.xcarchive -name "*.app" -type d | head -n 1)
        fi
        
        # 如果仍找不到，尝试在build目录查找
        if [ ! -d "$APP_PATH" ]; then
          echo "在归档中未找到应用，搜索构建目录..."
          APP_PATH=$(find $GITHUB_WORKSPACE/build -name "*.app" -type d | head -n 1)
        fi
        
        # 如果找到应用，进行打包
        if [ -d "$APP_PATH" ]; then
          echo "找到应用程序: $APP_PATH，开始打包IPA..."
          
          # 验证应用包内的Info.plist，但不尝试复制新的以避免冲突
          if [ -f "$APP_PATH/Info.plist" ]; then
            echo "应用包中已有Info.plist文件"
            plutil -p "$APP_PATH/Info.plist" || echo "Info.plist可能存在问题"
          else
            echo "警告：应用包中没有找到Info.plist，尝试复制..."
            cp iDevice_ZH/Info.plist "$APP_PATH/Info.plist"
          fi
          
          # 复制应用到Payload目录
          cp -R "$APP_PATH" $RUNNER_TEMP/ipa/Payload/
          
          # 打包IPA
          cd $RUNNER_TEMP/ipa
          zip -r iDevice_ZH.ipa Payload
          
          # 验证IPA
          ls -la $RUNNER_TEMP/ipa
          echo "IPA创建完成: $(du -h iDevice_ZH.ipa | cut -f1)"
        else
          echo "错误: 无法找到应用程序"
          exit 1
        fi
    
    - name: 上传IPA文件
      uses: actions/upload-artifact@v4
      with:
        name: iDevice_ZH-IPA
        path: ${{ runner.temp }}/ipa/iDevice_ZH.ipa
        
    - name: 上传归档文件
      uses: actions/upload-artifact@v4
      with:
        name: iDevice_ZH-Archive
        path: ${{ runner.temp }}/iDevice_ZH.xcarchive/