name: iOS构建

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # 允许手动触发

jobs:
  build:
    name: 构建与测试
    runs-on: macos-latest

    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Xcode版本
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: 设置Ruby和CocoaPods
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0'
        bundler-cache: true
    
    - name: 安装依赖
      run: |
        gem install cocoapods
        if [ -f "Podfile" ]; then
          pod install --repo-update
        else
          echo "没有找到Podfile，跳过CocoaPods依赖安装"
        fi
      working-directory: ${{ github.workspace }}
      
    - name: 修复桥接头文件路径
      run: |
        echo "int poc(char *path);" > iDevice_ZH/iDevice_ZH-Bridge-Header.h
        sed -i '' 's|/Users/geosn0w/Desktop/iDevice_ZH/iDevice_ZH/iDevice_ZH-Bridge-Header.h|iDevice_ZH/iDevice_ZH-Bridge-Header.h|g' iDevice_ZH.xcodeproj/project.pbxproj

    - name: 构建应用
      run: |
        if [ -f "iDevice_ZH.xcworkspace/contents.xcworkspacedata" ]; then
          WORKSPACE_ARG="-workspace iDevice_ZH.xcworkspace"
        else
          WORKSPACE_ARG="-project iDevice_ZH.xcodeproj"
        fi
        
        # 列出可用的scheme
        xcodebuild -list $WORKSPACE_ARG
        
        # 使用一个在CI环境中可用的模拟器，例如iPhone 16 Pro
        xcodebuild clean build $WORKSPACE_ARG -scheme "iDevice_ZH" -destination "platform=iOS Simulator,name=iPhone 16 Pro" CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO
      working-directory: ${{ github.workspace }}
      
    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: app-build
        path: |
          ${{ github.workspace }}/build/Release-iphonesimulator/iDevice_ZH.app
          
  archive:
    name: 归档IPA
    needs: build
    runs-on: macos-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Xcode版本
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: 修复桥接头文件路径
      run: |
        echo "int poc(char *path);" > iDevice_ZH/iDevice_ZH-Bridge-Header.h
        sed -i '' 's|/Users/geosn0w/Desktop/iDevice_ZH/iDevice_ZH/iDevice_ZH-Bridge-Header.h|iDevice_ZH/iDevice_ZH-Bridge-Header.h|g' iDevice_ZH.xcodeproj/project.pbxproj
      
    - name: 强制使用Debug配置
      run: |
        # 修改构建配置，确保使用 Debug 配置进行归档（包含 -Onone 优化级别）
        if [ -f "iDevice_ZH.xcodeproj/project.pbxproj" ]; then
          # 确保Swift优化级别设置正确
          sed -i '' 's/SWIFT_OPTIMIZATION_LEVEL = "-O"/SWIFT_OPTIMIZATION_LEVEL = "-Onone"/g' iDevice_ZH.xcodeproj/project.pbxproj
          sed -i '' 's/SWIFT_OPTIMIZATION_LEVEL = "-Owholemodule"/SWIFT_OPTIMIZATION_LEVEL = "-Onone"/g' iDevice_ZH.xcodeproj/project.pbxproj
        fi
  
    - name: 构建和归档
      run: |
        # 检查工作区文件是否存在，并使用正确的路径
        if [ -f "iDevice_ZH.xcworkspace/contents.xcworkspacedata" ]; then
          WORKSPACE_ARG="-workspace iDevice_ZH.xcworkspace"
        else
          WORKSPACE_ARG="-project iDevice_ZH.xcodeproj"
        fi
        
        # 列出可用的scheme
        xcodebuild -list $WORKSPACE_ARG
        
        # 使用指定的scheme和配置
        xcodebuild $WORKSPACE_ARG -scheme "iDevice_ZH" -configuration Debug -archivePath $RUNNER_TEMP/iDevice_ZH.xcarchive archive CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO SWIFT_OPTIMIZATION_LEVEL="-Onone"
        
        # 创建导出目录
        mkdir -p $RUNNER_TEMP/build
        
        # 复制构建产物
        cp -R $RUNNER_TEMP/iDevice_ZH.xcarchive $RUNNER_TEMP/build/
    
    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: iDevice_ZH-Archive
        path: ${{ runner.temp }}/build/

