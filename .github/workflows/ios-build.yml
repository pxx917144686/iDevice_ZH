name: iOS构建

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # 允许手动触发

permissions:
  contents: write

jobs:
  build:
    name: 构建与打包IPA
    runs-on: macos-latest

    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Xcode版本
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: 安装依赖
      run: |
        gem install cocoapods
        if [ -f "Podfile" ]; then
          pod install --repo-update
        else
          echo "没有找到Podfile，跳过CocoaPods依赖安装"
        fi
      
    - name: 修复桥接头文件和项目配置
      run: |
        # 创建桥接头文件
        echo "int poc(char *path);" > iDevice_ZH/iDevice_ZH-Bridge-Header.h
        
        # 使用绝对路径修复桥接头文件引用
        CURRENT_DIR="$(pwd)"
        sed -i '' "s|/Users/geosn0w/Desktop/iDevice_ZH/iDevice_ZH/iDevice_ZH-Bridge-Header.h|$CURRENT_DIR/iDevice_ZH/iDevice_ZH-Bridge-Header.h|g" iDevice_ZH.xcodeproj/project.pbxproj
        
        # 同时修复pxx917144686的引用，如果存在
        sed -i '' "s|/Users/pxx917144686/Desktop/iDevice_ZH/iDevice_ZH/iDevice_ZH-Bridge-Header.h|$CURRENT_DIR/iDevice_ZH/iDevice_ZH-Bridge-Header.h|g" iDevice_ZH.xcodeproj/project.pbxproj
        
        # 确保部署目标正确设置为16.0
        sed -i '' 's/IPHONEOS_DEPLOYMENT_TARGET = 12.0/IPHONEOS_DEPLOYMENT_TARGET = 16.0/g' iDevice_ZH.xcodeproj/project.pbxproj
        
        # 移除Info.plist重复引用
        if grep -q "Info.plist in Resources" iDevice_ZH.xcodeproj/project.pbxproj; then
          echo "在Copy Bundle Resources阶段找到Info.plist引用，准备移除..."
          sed -i '' '/Info.plist in Resources/d' iDevice_ZH.xcodeproj/project.pbxproj
        fi
        
    # 增强型模块映射修复步骤
    - name: 增强型模块映射修复
      run: |
        # 创建一个更全面的ModuleMapFix.h文件
        cat > iDevice_ZH/ModuleMapFix.h << EOL
        //
        //  ModuleMapFix.h
        //  iDevice Toolkit
        //
        //  Created on $(date +"%m/%d/%y")
        //

        #ifndef ModuleMapFix_h
        #define ModuleMapFix_h

        // 使用传统包含方式避免模块冲突
        #import <os/object.h>
        #import <os/base.h>
        #import <os/lock.h>
        #import <os/log.h>
        
        // 预定义相关类型以避免模块冲突
        #ifndef OS_OBJECT_HAVE_OBJC_SUPPORT
        #define OS_OBJECT_HAVE_OBJC_SUPPORT 1
        #endif

        #endif /* ModuleMapFix_h */
        EOL
        
        # 修改项目设置以避免模块问题
        echo "===== 修改项目设置以避免模块问题 ====="
        
        # 1. 在所有Swift文件中添加导入修复
        echo "// 在Swift文件中添加导入修复"
        find iDevice_ZH -name "*.swift" -exec sed -i '' '1s/^/import Foundation\n/' {} \;
        
        # 2. 修改Xcode项目配置
        if [ -f "iDevice_ZH.xcodeproj/project.pbxproj" ]; then
          echo "修改Xcode项目配置..."
          # 禁用模块化头文件
          sed -i '' 's/CLANG_ENABLE_MODULES = YES;/CLANG_ENABLE_MODULES = NO;/g' iDevice_ZH.xcodeproj/project.pbxproj
          # 添加预处理器定义
          sed -i '' 's/GCC_PREPROCESSOR_DEFINITIONS = /GCC_PREPROCESSOR_DEFINITIONS = "DISABLE_EXPLICIT_MODULE=1 OS_OBJECT_USE_OBJC=0 "/g' iDevice_ZH.xcodeproj/project.pbxproj
        fi
        
        # 3. 在Podfile.lock中修改设置（如果存在）
        if [ -f "Podfile.lock" ]; then
          echo "修改Podfile.lock..."
          sed -i '' 's/CLANG_ENABLE_MODULES = YES/CLANG_ENABLE_MODULES = NO/g' Podfile.lock || true
          sed -i '' 's/CLANG_ENABLE_MODULE_DEBUGGING = YES/CLANG_ENABLE_MODULE_DEBUGGING = NO/g' Podfile.lock || true
        fi
        
        # 4. 创建模块映射覆盖
        mkdir -p ModuleOverrides
        cat > ModuleOverrides/module.modulemap << EOL
        // 覆盖模块映射以避免os_object冲突
        module os_object {
          export *
          header "/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/include/os/object.h"
          link "System"
        }
        EOL
        
        # 设置环境变量
        echo "SWIFT_DISABLE_SAFETY_CHECKS=YES" >> $GITHUB_ENV
        echo "SWIFT_ENFORCE_EXCLUSIVE_ACCESS=off" >> $GITHUB_ENV
        echo "SWIFT_ENABLE_BATCH_MODE=NO" >> $GITHUB_ENV
    
    - name: 清理构建缓存
      run: |
        # 清理所有派生数据和缓存
        rm -rf ~/Library/Developer/Xcode/DerivedData/*
        rm -rf ~/Library/Caches/com.apple.dt.Xcode/*
        rm -rf ~/Library/Developer/Xcode/Archives/*
        
        if [ -d "~/Library/Caches/CocoaPods" ]; then
          rm -rf ~/Library/Caches/CocoaPods/*
        fi
        
        # 显示环境信息以进行诊断
        xcodebuild -version
        swift --version
    
    - name: 构建和归档应用
      run: |
        # 确定工作区或项目参数
        if [ -f "iDevice_ZH.xcworkspace/contents.xcworkspacedata" ]; then
          WORKSPACE_ARG="-workspace iDevice_ZH.xcworkspace"
        else
          WORKSPACE_ARG="-project iDevice_ZH.xcodeproj"
        fi
        
        # 列出可用的scheme
        xcodebuild -list $WORKSPACE_ARG
        
        # 构建并归档应用 - 增强构建设置
        xcodebuild clean archive $WORKSPACE_ARG \
          -scheme "iDevice_ZH" \
          -configuration Debug \
          -archivePath $RUNNER_TEMP/iDevice_ZH.xcarchive \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          SWIFT_OPTIMIZATION_LEVEL="-Onone" \
          IPHONEOS_DEPLOYMENT_TARGET=16.0 \
          GCC_PREPROCESSOR_DEFINITIONS="$GCC_PREPROCESSOR_DEFINITIONS DISABLE_EXPLICIT_MODULE=1 OS_OBJECT_USE_OBJC=0" \
          SWIFT_DISABLE_SAFETY_CHECKS=YES \
          SWIFT_ENFORCE_EXCLUSIVE_ACCESS=off \
          SWIFT_ENABLE_BATCH_MODE=NO \
          OTHER_CFLAGS="-fno-modules -fno-autolink" \
          OTHER_SWIFT_FLAGS="-Xfrontend -disable-implicit-stdlib-module-map" \
          SWIFT_DISABLE_SAFETY_CHECKS=YES \
          SWIFT_STRICT_CONCURRENCY=minimal \
          -verbose
      
    # 后续步骤保持不变...
    - name: 打包IPA
      run: |
        # 创建IPA结构
        mkdir -p $RUNNER_TEMP/build/Payload
        
        # 查找应用程序位置
        APP_PATH="$RUNNER_TEMP/iDevice_ZH.xcarchive/Products/Applications/iDevice_ZH.app"
        if [ -d "$APP_PATH" ]; then
          echo "找到应用程序: $APP_PATH"
          cp -r "$APP_PATH" $RUNNER_TEMP/build/Payload/
        else
          echo "警告: 未找到预期的应用路径，尝试查找其他可能的位置..."
          FOUND_APP=$(find $RUNNER_TEMP -name "*.app" -type d | head -n 1)
          if [ -n "$FOUND_APP" ]; then
            echo "找到替代应用路径: $FOUND_APP"
            cp -r "$FOUND_APP" $RUNNER_TEMP/build/Payload/
          else
            echo "错误: 未找到任何应用文件"
            exit 1
          fi
        fi
        
        # 打包IPA
        cd $RUNNER_TEMP/build
        zip -r iDevice_ZH.ipa Payload
        echo "IPA文件内容:"
        unzip -l iDevice_ZH.ipa | head -n 20
    
    - name: 上传IPA作为工作流产物
      uses: actions/upload-artifact@v4
      with:
        name: iDevice_ZH-unsigned
        path: ${{ runner.temp }}/build/iDevice_ZH.ipa
        
    - name: 获取当前日期
      id: date
      run: echo "date=$(date +'%Y%m%d-%H%M')" >> $GITHUB_OUTPUT
    
    - name: 创建Release
      if: github.event_name != 'pull_request'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: build-${{ steps.date.outputs.date }}
        name: 自动构建 ${{ steps.date.outputs.date }}
        body: |
          iDevice_ZH自动构建版本
          
          构建时间: ${{ steps.date.outputs.date }}
          未签名IPA文件，需要自行签名后安装。
        draft: false
        prerelease: true
        files: ${{ runner.temp }}/build/iDevice_ZH.ipa
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  syntax_check:
    name: Swift语法检查
    runs-on: macos-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: Swift语法检查
        run: |
          swift --version
          echo "执行基本语法检查..."
          find iDevice_ZH -name "*.swift" -print0 | xargs -0 -n1 swift -syntax-only || true
          echo "基本语法检查完成。"
          exit 0