name: iOS构建

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # 允许手动触发

permissions:
  contents: write

jobs:
  build:
    name: 构建与打包IPA
    runs-on: macos-latest

    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Xcode版本
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: 安装依赖
      run: |
        gem install cocoapods
        if [ -f "Podfile" ]; then
          pod install --repo-update
        else
          echo "没有找到Podfile，跳过CocoaPods依赖安装"
        fi
      
    - name: 修复桥接头文件和项目配置
      run: |
        # 创建桥接头文件
        echo "int poc(char *path);" > iDevice_ZH/iDevice_ZH-Bridge-Header.h
        
        # 使用绝对路径修复桥接头文件引用
        CURRENT_DIR="$(pwd)"
        sed -i '' "s|/Users/geosn0w/Desktop/iDevice_ZH/iDevice_ZH/iDevice_ZH-Bridge-Header.h|$CURRENT_DIR/iDevice_ZH/iDevice_ZH-Bridge-Header.h|g" iDevice_ZH.xcodeproj/project.pbxproj
        
        # 同时修复pxx917144686的引用，如果存在
        sed -i '' "s|/Users/pxx917144686/Desktop/iDevice_ZH/iDevice_ZH/iDevice_ZH-Bridge-Header.h|$CURRENT_DIR/iDevice_ZH/iDevice_ZH-Bridge-Header.h|g" iDevice_ZH.xcodeproj/project.pbxproj
        
        # 确保部署目标正确设置为16.0
        sed -i '' 's/IPHONEOS_DEPLOYMENT_TARGET = 12.0/IPHONEOS_DEPLOYMENT_TARGET = 16.0/g' iDevice_ZH.xcodeproj/project.pbxproj
        
        # 移除Info.plist重复引用
        if grep -q "Info.plist in Resources" iDevice_ZH.xcodeproj/project.pbxproj; then
          echo "在Copy Bundle Resources阶段找到Info.plist引用，准备移除..."
          sed -i '' '/Info.plist in Resources/d' iDevice_ZH.xcodeproj/project.pbxproj
        fi
    
    - name: 构建和归档应用
      run: |
        # 确定工作区或项目参数
        if [ -f "iDevice_ZH.xcworkspace/contents.xcworkspacedata" ]; then
          WORKSPACE_ARG="-workspace iDevice_ZH.xcworkspace"
        else
          WORKSPACE_ARG="-project iDevice_ZH.xcodeproj"
        fi
        
        # 列出可用的scheme
        xcodebuild -list $WORKSPACE_ARG
        
        # 构建并归档应用
        xcodebuild clean archive $WORKSPACE_ARG \
          -scheme "iDevice_ZH" \
          -configuration Debug \
          -archivePath $RUNNER_TEMP/iDevice_ZH.xcarchive \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          SWIFT_OPTIMIZATION_LEVEL="-Onone" \
          IPHONEOS_DEPLOYMENT_TARGET=16.0
      
    - name: 打包IPA
      run: |
        # 创建IPA结构
        mkdir -p $RUNNER_TEMP/build/Payload
        
        # 查找应用程序位置
        APP_PATH="$RUNNER_TEMP/iDevice_ZH.xcarchive/Products/Applications/iDevice_ZH.app"
        if [ -d "$APP_PATH" ]; then
          echo "找到应用程序: $APP_PATH"
          cp -r "$APP_PATH" $RUNNER_TEMP/build/Payload/
        else
          echo "警告: 未找到预期的应用路径，尝试查找其他可能的位置..."
          FOUND_APP=$(find $RUNNER_TEMP -name "*.app" -type d | head -n 1)
          if [ -n "$FOUND_APP" ]; then
            echo "找到替代应用路径: $FOUND_APP"
            cp -r "$FOUND_APP" $RUNNER_TEMP/build/Payload/
          else
            echo "错误: 未找到任何应用文件"
            exit 1
          fi
        fi
        
        # 打包IPA
        cd $RUNNER_TEMP/build
        zip -r iDevice_ZH.ipa Payload
        echo "IPA文件内容:"
        unzip -l iDevice_ZH.ipa | head -n 20
    
    - name: 上传IPA作为工作流产物
      uses: actions/upload-artifact@v4
      with:
        name: iDevice_ZH-unsigned
        path: ${{ runner.temp }}/build/iDevice_ZH.ipa
        
    - name: 获取当前日期
      id: date
      run: echo "date=$(date +'%Y%m%d-%H%M')" >> $GITHUB_OUTPUT
    
    - name: 创建Release
      if: github.event_name != 'pull_request'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: build-${{ steps.date.outputs.date }}
        name: 自动构建 ${{ steps.date.outputs.date }}
        body: |
          iDevice_ZH自动构建版本
          
          构建时间: ${{ steps.date.outputs.date }}
          未签名IPA文件，需要自行签名后安装。
        draft: false
        prerelease: true
        files: ${{ runner.temp }}/build/iDevice_ZH.ipa
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  syntax_check:
    name: Swift语法检查
    runs-on: macos-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: Swift语法检查
        run: |
          swift --version
          echo "执行基本语法检查..."
          find iDevice_ZH -name "*.swift" -print0 | xargs -0 -n1 swift -syntax-only || true
          echo "基本语法检查完成。"
          exit 0